// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"thrift/lib/go/thrift"
	//"github.com/itoldman/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"thrift/test/go/src/rest/gen-go/rest"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string config(string client_id)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	//var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		fmt.Printf("urlString is %v\n", urlString)

		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		fmt.Println("Using http transport")

		//trans, err = thrift.NewTHttpClient(parsedUrl.String())

		trans, err = thrift.NewTHttpRPCClient("http", "localhost", 9090)
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()

	// var protocolFactory thrift.TProtocolFactory
	// switch protocol {
	// case "compact":
	// 	protocolFactory = thrift.NewTCompactProtocolFactory()
	// 	break
	// case "simplejson":
	// 	protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
	// 	break
	// case "json":
	// 	protocolFactory = thrift.NewTJSONProtocolFactory()
	// 	break
	// case "binary", "":
	// 	protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
	// 	break
	// default:
	// 	fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
	// 	Usage()
	// 	os.Exit(1)
	// }

	//client := rest.NewRestClientFactory(trans, protocolFactory)

	var tprotocol thrift.TProtocol
	fmt.Println("Creating binary protocol")
	//tprotocol = thrift.NewTBinaryProtocolTransport(trans)
	tprotocol = thrift.NewTHTTPProtocolTransport(trans)

	client := rest.NewRestClientProtocol(trans, tprotocol, tprotocol)

	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "eve":
		trans, err = thrift.NewTHttpRPCClient("http", "eve.pf.tap4fun.com", 10000)
		tprotocol = thrift.NewTHTTPProtocolTransport(trans)
		client := rest.NewRestClientProtocol(trans, tprotocol, tprotocol)
		Result, err := client.ConfigGet("test:1.0.0")
		//Result, err := client.Add(1, 2)
		if err != nil {
			fmt.Printf("Got result err:%v\n", err)
			os.Exit(1)
		}
		fmt.Printf("Eve config reslut is:%v\n", Result)
		fmt.Print("\n")
		break
	case "config":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Config requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Println("Executing config function")
		Result, err := client.ConfigGet(value0)
		//Result, err := client.Add(1, 2)
		if err != nil {
			fmt.Printf("Got result err:%v\n", err)
			os.Exit(1)
		}
		fmt.Printf("RPC reslut is:%v\n", Result)
		fmt.Print("\n")
		break
	case "add":
		fmt.Println("Executing add function")
		argvalue0 := flag.Arg(1)
		i1, _ := strconv.Atoi(argvalue0)
		argvalue1 := flag.Arg(2)
		i2, _ := strconv.Atoi((argvalue1))
		Result, err := client.AddPost(int32(i1), int32(i2))
		if err != nil {
			fmt.Printf("Got result err:%v\n", err)
			os.Exit(1)
		}
		fmt.Printf("RPC reslut is:%v\n", Result)
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
